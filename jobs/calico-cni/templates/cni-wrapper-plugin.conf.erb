<%
  def discover_etcd_server
    etcd_servers_addr = " "
    if_link("etcd") do |etcd_servers|
       etcd_servers.instances.map do |instance|
         etcd_servers_addr = "http://" + instance.address + ":4001"
       end
    end
    etcd_servers_addr
  end
  etcd_servers = discover_etcd_server
%>
<% unless p("cf_networking.disable") %>
<%=
  require 'json'

  OVERHEAD = 0

  def compute_mtu
    mtu = p('cf_networking.mtu')
    if mtu > 0
      return mtu - OVERHEAD
    else
      return mtu
    end
  end
  # "mtu" => compute_mtu,

  toRender = {
    "name" => "cni-wrapper",
    "type" => "cni-wrapper-plugin",
    "cniVersion" => "0.3.1",
    "datastore" => "/var/vcap/data/container-metadata/store.json",
    "iptables_lock_file" => "/var/vcap/data/garden-cni/iptables.lock",
    "health_check_url" => "http://127.0.0.1:8500", #fixme
    "instance_address" => spec.ip,
    "iptables_asg_logging" => p("cf_networking.iptables_logging"),
    "iptables_c2c_logging" => p("cf_networking.iptables_logging"),
    "iptables_denied_logs_per_sec" => p("cf_networking.iptables_denied_logs_per_sec"),
    "ingress_tag" => "ffff0000",
    "vtep_name" => "silk-vtep",
    "dns_servers" => p("cf_networking.dns_servers"),
    "delegate" => {
      "cniVersion" => "0.3.1",
      "etcd_endpoints" => etcd_servers,
      "log_level" => "DEBUG",
      "name" => "calico",
      "type" => "calico",
      "ipam" => {
        "type" => "calico-ipam",
        "assign_ipv4" => "true",
        "ipv4_pools" => [p("cf_networking.network")]
      }  
     }
  }

  JSON.pretty_generate(toRender)
%>
<% end %>
